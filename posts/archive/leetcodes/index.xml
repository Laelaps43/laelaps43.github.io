<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode on Laelaps</title>
    <link>https://blog.laelaps.us/posts/archive/leetcodes/</link>
    <description>Recent content in Leetcode on Laelaps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Apr 2025 01:00:33 +0000</lastBuildDate>
    <atom:link href="https://blog.laelaps.us/posts/archive/leetcodes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>力扣17题解</title>
      <link>https://blog.laelaps.us/posts/archive/leetcodes/17/</link>
      <pubDate>Mon, 07 Aug 2023 22:29:40 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/archive/leetcodes/17/</guid>
      <description>前言 一开始想到的是使用一个Map来存储，其实有一个数组来存储字母组合获取更加的方便。回溯思想。&#xA;回溯 func letterCombinations(digits string) []string { if digits == &amp;#34;&amp;#34;{ return make([]string, 0) } tel := map[rune]string{ &amp;#39;2&amp;#39;: &amp;#34;abc&amp;#34;, &amp;#39;3&amp;#39;: &amp;#34;def&amp;#34;, &amp;#39;4&amp;#39;: &amp;#34;ghi&amp;#34;, &amp;#39;5&amp;#39;: &amp;#34;jkl&amp;#34;, &amp;#39;6&amp;#39;: &amp;#34;mno&amp;#34;, &amp;#39;7&amp;#39;: &amp;#34;pqrs&amp;#34;, &amp;#39;8&amp;#39;: &amp;#34;tuv&amp;#34;, &amp;#39;9&amp;#39;: &amp;#34;wxyz&amp;#34;, } result := make([]string, 0) path := make([]rune,0, len(digits)) backtracking(0, digits, &amp;amp;path, &amp;amp;result, &amp;amp;tel) return result } func backtracking(start int, digits string, path *[]rune, result *[]string, tel *map[rune]string){ if len(*path) == len(digits){ *result = append(*result, string(*path)) return } for _,value := range (*tel)[rune(digits[start])] { *path = append(*path, value) backtracking(start + 1, digits, path, result, tel) *path = (*path)[:len(*path) -1 ] } } </description>
    </item>
    <item>
      <title>力扣216题解</title>
      <link>https://blog.laelaps.us/posts/archive/leetcodes/216/</link>
      <pubDate>Sun, 06 Aug 2023 22:18:30 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/archive/leetcodes/216/</guid>
      <description>前言 回溯问题&#xA;回溯 func combinationSum3(k int, n int) [][]int { path := make([]int, 0, k) result := make([][]int, 0) backtracking(1, k, n, 9, 0, &amp;amp;path, &amp;amp;result) return result } func backtracking(start, k, n, end, target int, path *[]int, result *[][]int){ if len(*path) == k { if target == n{ tmp := make([]int, k) copy(tmp, *path) *result = append(*result, tmp) } return } if start &amp;gt; end || n &amp;lt; target || start &amp;gt; n{ return } *path = append(*path, start) backtracking(start + 1, k, n, end, target + start, path, result) *path = (*path)[:len(*path) - 1] backtracking(start + 1, k, n, end,target, path, result) } </description>
    </item>
    <item>
      <title>力扣77题解</title>
      <link>https://blog.laelaps.us/posts/archive/leetcodes/77/</link>
      <pubDate>Sun, 06 Aug 2023 21:54:47 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/archive/leetcodes/77/</guid>
      <description>前言 回溯算法题目&#xA;回溯 func combine(n int, k int) [][]int { path := make([]int, 0) result := make([][]int, 0) backtracking(1, n, k, &amp;amp;path, &amp;amp;result) return result } func backtracking(begin, n, k int, path *[]int, result *[][]int) { if len(*path) == k{ tmp := make([]int, k) copy(tmp, *path) *result = append(*result, tmp) return } if begin &amp;gt; n { return } *path = append(*path, begin) backtracking(begin+1, n, k, path, result) *path = (*path)[:len(*path) - 1] backtracking(begin+1, n, k, path, result) } </description>
    </item>
    <item>
      <title>力扣62题解</title>
      <link>https://blog.laelaps.us/posts/archive/leetcodes/62/</link>
      <pubDate>Sat, 05 Aug 2023 21:05:55 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/archive/leetcodes/62/</guid>
      <description>前言 在看到这题时，可以很快的想到是使用DP去做，其实我们最先想到的是使用递归去做，但是我感觉有点复杂，因为这个题目的状态转移方程很容易求解出来。&#xA;DP func uniquePaths(m int, n int) int { var grid [100][100]int grid[0][0] = 1 for i := 0; i &amp;lt; m; i++{ for j := 0; j &amp;lt; n; j++{ if i == 0 &amp;amp;&amp;amp; j != 0 { // 第一行 grid[i][j] = grid[i][j - 1] } if j == 0 &amp;amp;&amp;amp; i != 0{ // 第一列 grid[i][j] = grid[i - 1][j] } if i != 0 &amp;amp;&amp;amp; j !</description>
    </item>
    <item>
      <title>力扣19题解</title>
      <link>https://blog.laelaps.us/posts/archive/leetcodes/19/</link>
      <pubDate>Thu, 03 Aug 2023 17:05:24 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/archive/leetcodes/19/</guid>
      <description>前言 看到这个是关于链表的题目，那么就是使用递归或者是迭代了，在递归的时候，是从后往前数到第n个；使用迭代则是先得出总的节点数，然后在使用总的节点数减去n，得到的就是从前往后数的个数，在使用一次迭代就可以将节点删去。&#xA;迭代 func removeNthFromEnd(head *ListNode, n int) *ListNode { dummy := &amp;amp;ListNode{0, head} tmp := dummy.Next sum := 0 for tmp.Next != nil { tmp = tmp.Next sum += 1 } beforeNth := sum - n tmp = dummy for i := 0; i &amp;lt;= beforeNth; i++{ tmp = tmp.Next } tmp.Next = tmp.Next.Next return dummy.Next } 递归 func removeNthFromEnd(head *ListNode, n int) *ListNode { m := 0 dummy := &amp;amp;ListNode{0, head} removeByRecursion(dummy, n, &amp;amp;m) return dummy.</description>
    </item>
    <item>
      <title>力扣24题解</title>
      <link>https://blog.laelaps.us/posts/archive/leetcodes/24/</link>
      <pubDate>Wed, 02 Aug 2023 06:37:05 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/archive/leetcodes/24/</guid>
      <description>前言 这题是关于链表，那么我首先想到的就是使用递归去解决，但是我在这个过程中，发现空间复杂度有点大，所有第二次那么就直接使用迭代了。&#xA;递归 func swapPairs(head *ListNode) *ListNode { if head == nil || head.Next == nil{ return head } nextNode := head.Next head.Next, nextNode.Next = swapPairs(nextNode.Next), head return nextNode } 迭代 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func swapPairs(head *ListNode) *ListNode { var tailPre,nextNode,nodeTmp *ListNode = nil, nil, nil node := head for node != nil &amp;amp;&amp;amp; node.</description>
    </item>
    <item>
      <title>力扣53题解</title>
      <link>https://blog.laelaps.us/posts/archive/leetcodes/53/</link>
      <pubDate>Tue, 18 Jul 2023 20:25:31 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/archive/leetcodes/53/</guid>
      <description>前言 我一开始想到的是使用双指针，但是写着写着发现还是有点复杂的，最后放弃了这种方法，因为之前做个这个题目，所以也很容易想到贪心。&#xA;贪心 思想 当sum &amp;lt;= 0时，重新将sum赋值为0，因为一个负数加上一个负数，那么他更小，如果他加上一个大于他的数，我们为什么不选择比他的那个数，而需要加上他呢。&#xA;Java public static int maxSubArray(int[] nums) { int max = Integer.MIN_VALUE; int sum = 0; for (int i = 0; i &amp;lt; nums.length; i++) { sum += nums[i]; max = Math.max(max, sum); if (sum &amp;lt;= 0) sum = 0; } return max; } Go func maxSubArray(nums []int) int { max := math.MinInt sum := 0 for _, num := range(nums){ sum += num if sum &amp;gt; max { max = sum } if sum &amp;lt;= 0 { sum = 0 } } return max } </description>
    </item>
  </channel>
</rss>
