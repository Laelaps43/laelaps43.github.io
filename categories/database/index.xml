<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DataBase on Laelaps</title>
    <link>https://blog.laelaps.us/categories/database/</link>
    <description>Recent content in DataBase on Laelaps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 May 2025 00:59:30 +0000</lastBuildDate>
    <atom:link href="https://blog.laelaps.us/categories/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Indexing</title>
      <link>https://blog.laelaps.us/posts/archive/database/indexing/</link>
      <pubDate>Fri, 25 Aug 2023 10:45:00 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/archive/database/indexing/</guid>
      <description>索引是存储引擎用来快速找到记录的一种数据结构。 优点：&#xA;减少服务器需要扫描的数据量 帮助服务器避免排序和临时表 将随机I/O变为顺序I/O 聚集索引和非聚集索引 聚集索引和非聚集索引的区别在于表记录的排列顺序与索引的排列顺序是否一致。 区别：&#xA;聚集索引一个表只有一个，非聚集索引可以有多个。 聚集索引为物理上的连续，非聚集索引为逻辑上的连续。 聚集索引 聚集索引表记录的排列顺序和索引的排列顺序一致，当为聚集索引时，行数据时间存放在索引的叶子节点中，所以数据访问更快；但是如果我们在插入数据的时候，为了保证表中的数据和索引的顺序一致，那么会引起索引的变化，导致在在修改数据的时候非常慢；聚集索引在物理内存中的顺序只有一种，所以聚集索引在一种表中只能有一个。&#xA;非聚集索引 也叫二级索引或辅助索引，非聚集索引只是逻辑上制定了表中记录的顺序，但是物理位置不一定一致，在非聚集索引中叶子节点并不和实际的数据重叠，而是叶子节点包含一个指向表中记录的指针，所以在使用非聚集索引时会进行两次磁盘的随机I/O，第一次用来获取索引对应的主键，第二次用来读取主键对应的位置。&#xA;顺序索引 基于码的顺序排序索引；索引项或索引记录由一个搜索码值和指向具有该搜索码值的一条或者多条记录的指针构成，指向记录的指针包括磁盘块的标识和标识磁盘块内记录的块内偏移量。&#xA;稠密索引 如果是聚集索引，那么每个文件中的搜索码都有一个索引项，索引项包括搜索码值以及指向具有该搜索码值的第一条数据记录的指针，具有系统搜索码值的其余记录存储在第一条数据之后。&#xA;如果为非聚集索引，那么索引存储的是指向具有相同搜索码值记录的指针列表。&#xA;稀疏索引 稀疏索引要求索引必须是聚集索引，因为他只为某一些记录建立索引项，并且所有的记录都案搜索码的顺序存储，每一个索引项包括一个搜索码和指向记录的第一条指针。&#xA;在需要定位某一条记录时，需要找到搜索码值小于或等于所查记录搜索码值的索引项，然后从该索引项的记录开始，沿着记录开始寻找，直到找到对应的数据为止。&#xA;散列索引 散列索引也叫做哈希索引，他是基于哈希表所实现的，对于每一行数据，存储引擎会将数据使用散列函数计算一个哈希码，将哈希码存储到索引中，同时保存着指向数据的指针；所以存储引擎将值平均发布到散列桶中，由散列函数是用来决定目标桶。&#xA;哈希索引的结构十分紧凑，使得基于哈希所有的查找非常快，但同时也存在许多的不足。&#xA;哈希索引仅仅只包含哈希值和行指针，不能存储字段，所有不得不再次读取行数据。 哈希索引的排序不是按照哈希值的顺序排序的。 哈希索引不支持部分索引的模糊查找，因为索引是整体数据计算得出来的。 哈希索引只能等值比较。 可能存在大量的数据存在哈希冲突，对索引维护代价非常高。 在InnoDB引擎中，有一个叫做自适应哈希索引，当InnoDB中有一些索引使用的非常频繁时，他会在内存中基于B+Tree索引在创建一个哈希索引。 MySQL B-Tree索引 B-Tree是一种索引的数据结构，他可以看出由一个二元组[Key, data]组成，key记录的键值为索引使用，而Data则是记录key之外的数据，但是值得注意的是B-Tree的所有纪律都存在于节点中；B-Tree的特性是，他会从根节点进行二分查找，找到了返回对应的节点，否则对相应的区间的指针指向的的节点进行递归查找，直到找到节点或者找到NULL指针，前者找到成功，后者为失败；以及在插入新的数据会破坏B-Tree的性质，因此在对一个树进行插入数据的时候，需要对树进行分裂、合并、转移来保证B-Tree的性质。 B+Tree B+Tree跟B-Tree不同在于，B+Tree的非叶子节点只存储key，而不存储数据，而叶子节点不存储key，只存储数据。 但是在所有的数据库系统中，并不会直接使用B+Tree，而是在B+Tree上进行了一些优化，比如在叶子节点中添加指向下一个叶子节点的指针，就可以将所的数据链接起来，可以进行局部的顺序查找，提高了区间访问性能。 MyISAM索引实现 MyISAM引擎疏慵B+Tree来实现索引（非聚集索引），在叶子节点的Data域存储的为数据记录的地址；同时他们没有指定主索引必须是主键，只要保证选择的列唯一即可。 InnoDB索引 InnoDB也使用B+Tree作为索引，但是更MyISAM不同的是，MyISAM是使用索引文件和数据文件分离，而在InnoDB数据文件则是索引的一部分，在B+Tree的叶子节点中的Data域中保存了完整的数据记录（聚集索引），而且索引的key必须是表的主键，如果没有指定主键，那么InnoDB 会自动选择一个可以唯一标识数据纪律作为主键，如果不存在这样的列，InnoDB会自动生成一个隐含字段作为主键，字段长度为6个字节。&#xA;在辅助索引中，MyISAM使用的也是地址，但是在InnoDB中实用的是主键索引，所以在InnoDB中使用防辅助索引，会先查找到主键，然后在用主键到主索引中获得记录，所以在InnoDB中并不建议使用较长的字段作为主键，因为过长的主键会导致辅助索引变得过大；在数据插入时，非单调的主键在插入数据的时候，会导致需要改变B+Tree的特性并得频繁的分裂，所以使用一个自增的字段作为索引在InnoDB中是非常好的选择。</description>
    </item>
  </channel>
</rss>
