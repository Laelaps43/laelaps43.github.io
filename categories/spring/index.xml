<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Laelaps</title>
    <link>https://blog.laelaps.us/categories/spring/</link>
    <description>Recent content in Spring on Laelaps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Jul 2025 01:05:57 +0000</lastBuildDate>
    <atom:link href="https://blog.laelaps.us/categories/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring MVC 拦截器</title>
      <link>https://blog.laelaps.us/posts/archive/spring/mvc/handlerinterceptor/</link>
      <pubDate>Thu, 07 Sep 2023 08:51:44 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/archive/spring/mvc/handlerinterceptor/</guid>
      <description>过滤器vs拦截器 过滤器（Filter）是Servlet的特性，他属于Servlet容器；而拦截器（HandlerInterceptor）是由Spring MVC提供的特性。 Filter可以拦截所到达的所有请求，而HandlerInterceptor只能拦截被DispatcherServlet处理过的请求。 在Request到达Servlet之前先执行Filter的预处理逻辑，在Request到达DispatcherServlet之后，Handler执行之前执行拦截器的功能。 Filter在doFilter方法中定义预处理和后处理两个逻辑，之间使用filterChain.doFilter进行分隔，同时Filter自身有初始化和销毁的方法，即init和destroy；而HandlerIntercepter则是将这两个方式分开preHandle、postHandle两个方法，同时他拥有一个afterCompletion方法，无论有没有发生异常，在DispatchServlet之后，都会执行afterCompletion。 如果在Spring中使用HandlerInterceptor可以自动Spring容器中被管理。 原理 在HandlerMapping在根据Request查找Handler时，他会返回一个处理器执行链对象（HandlerExecutionChain），内部包含了一个Handler和HandlerInterceptor执行链。如果想要自定义Handler拦截器，那么需要实现HandlerInterceptor接口中的三个方法。&#xA;preHandle：在处理Handler之前执行。 postHandle：在处理Handler成功之后，根据执行链的倒序执行，如果前面的流程出现异常则不会被执行。 afterCompletion：在请求执行完之后执行，他之后对preHandle返回True的HandlerInterceptor执行。 preHandle preHandle返回一个bool类型的值，可以用来终端或继续处理执行链。如果方法返回True时，他会继续沿着执行链继续向后执行；如果返回false，DispatcherServlet 会假定拦截器本身已处理完毕请求（例如，已经渲染了合适的视图），此时将尝试直接倒序执行此前已放行的拦截器链的afterCompletion 方法。&#xA;多个拦截器 我们在MVC的配置中可以配置多个拦截器，在默认情况下是通过配置的顺序来执行，我们可以使用InterceptorRegistration的Order属性来定义优先级问题，order中的值越小，优先级越高。&#xA;Example 定义一个实现了HandlerInterceptor接口的拦截器。&#xA;@Component public class MyHandlerInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(&amp;#34;MyHandlerInterceptor preHandle method......&amp;#34;); return HandlerInterceptor.super.preHandle(request, response, handler); } @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { HandlerInterceptor.super.postHandle(request, response, handler, modelAndView); System.out.println(&amp;#34;MyHandlerInterceptor postHandle method......&amp;#34;); } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { HandlerInterceptor.</description>
    </item>
    <item>
      <title>Spring Boot 监听事件</title>
      <link>https://blog.laelaps.us/posts/archive/spring/boot/applicationevent/</link>
      <pubDate>Tue, 05 Sep 2023 13:46:42 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/archive/spring/boot/applicationevent/</guid>
      <description>事件监听 Spring中的事件监听是观察者模式的一种实现，在观察者模式当中，应当有主题、发布者、订阅人；所有在Spring的事件中存在事件（ApplicationEvent）、监听器（ApplicationListener）和事件发布三部分。&#xA;事件用于在松耦合的组件之间交换信息，发布者和订阅者之间没有直接耦合，使得修改发布者并不会影响订阅者，反之也成立。&#xA;监听事件 监听事件是消息传递的对象，用来传递事件消息，在Spring中我们去继承ApplicationEvent来定义一个事件。&#xA;public class MyEvent extends ApplicationEvent { private String name; private int age; public MyEvent(Object source, String name, int age) { super(source); this.age = age; this.name = name; } } 事件发布 在定义事件后，我们需要发布事件，我们可以使用ApplicationContext和ApplicationEventPublisher两者来发布事件；前者去继承了后者。&#xA;@Service public class MyEventService { @Autowired ApplicationContext applicationContext; @Autowired ApplicationEventPublisher applicationEventPublisher; public void myEvent(){ System.out.println(&amp;#34;发布事件......&amp;#34;); applicationContext.publishEvent(new MyEvent(this, &amp;#34;laelaps&amp;#34;, 12)); System.out.println(&amp;#34;事件发布完毕。&amp;#34;); } public void myEvent2(){ System.out.println(&amp;#34;发布事件......&amp;#34;); applicationEventPublisher.publishEvent(new MyEvent(this, &amp;#34;laelaps&amp;#34;, 12)); System.out.println(&amp;#34;事件发布完毕。&amp;#34;); } } 事件监听 在发布了事件后，我们需要监听者去监听发布的事件；在Spring中有两种方式来定义监听对象；</description>
    </item>
  </channel>
</rss>
