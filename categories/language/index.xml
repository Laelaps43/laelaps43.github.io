<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Language on Laelaps</title>
    <link>https://blog.laelaps.us/categories/language/</link>
    <description>Recent content in Language on Laelaps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Jun 2025 01:02:43 +0000</lastBuildDate>
    <atom:link href="https://blog.laelaps.us/categories/language/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python 中的类</title>
      <link>https://blog.laelaps.us/posts/python/python_class/</link>
      <pubDate>Fri, 16 May 2025 19:02:00 +0800</pubDate>
      <guid>https://blog.laelaps.us/posts/python/python_class/</guid>
      <description>一直以来都没认真学习过Python中的类，今天系统的看了一下，对Python中的类有了进一步的认识。&#xA;定义 &amp;amp;&amp;amp; 实例化 类的定义是通过 class 关键字类定义的，并且习惯都是首字母大写。默认都是继承object&#xA;class MyClass(object): pass 类的实例化没有Java的那么复杂，不要new关键字。&#xA;my_class = MyClass() 在类的下面有__new__ 和 __init__两个特殊方法，__new__是一个静态用来的是分配内存创建一个新的实例，他在__init__之前就调用了；__init__是一个实例方法，他用来初始化一个已经存在的实例，为他设置对象的初始化属性。&#xA;class MyClass(object): def __new__(cls, *args, **kwargs): print(&amp;#34;Creating instance of MyClass&amp;#34;) return super().__new__(cls) def __init__(self, a): print(&amp;#34;Initializing instance of MyClass&amp;#34;) self.a = a my_class = MyClass(2) __init__不等于Java中的构造函数。&#xA;属性 基础 属性分为类属性和实例属性。实例属性每个实例独自占有，类属性只有一份。&#xA;class MyClass(object): b = 3 # 类属性 def __init__(self, a): self.a = a # 实例属性 my_class = MyClass(2) my_class2 = MyClass(3) print(my_class.a) # 2 print(my_class.</description>
    </item>
  </channel>
</rss>
